// A basic setup for backgrounding sprites
@mixin sprite-bg-img($img-1x, $img-2x: null) {
  @include sprite($img-1x);
  display: block;
  text-indent: -9999px;
  @if $img-2x {
    $img-2x-path: nth($img-2x, 9);
    @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (   min--moz-device-pixel-ratio: 2),
    only screen and (     -o-min-device-pixel-ratio: 2/1),
    only screen and (        min-device-pixel-ratio: 2),
    only screen and (                min-resolution: 192dpi),
    only screen and (                min-resolution: 2dppx) {
      background-image: url("#{$img-2x-path}");
      background-size: nth($img-1x, 5) nth($img-1x, 6);
      @include sprite-position($img-2x);
    }
  }
}

// we're actually not using the sprite,
// but we want to grab the dimensions!
@mixin svg-bg($sprite, $filename: '') {
  @include sprite-width($sprite);
  @include sprite-height($sprite);
  display: block;
  background: transparent url("../images/svg/#{$filename}.svg") no-repeat scroll 0 0;
}

// http://joshbroton.com/quick-fix-sass-mixins-for-css-keyframe-animations/

@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';

  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }
  -webkit-animation: $animations;
  -moz-animation:    $animations;
  -o-animation:      $animations;
  animation:         $animations;
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}

@mixin fz($font-size: 14px, $line-height: 18px) {
  font-size: $font-size;
  line-height: $line-height;
}

@mixin basic-list($margin-bottom: 15px) {
  ul {
    @extend .list-unstyled;
    li {
      margin-bottom: $margin-bottom;
      &:last-child {
        margin-bottom: 0;
      }
    }
  }
}

// Bootstrap mixin overrides

@mixin transition-delay($transition-delay...) {
  -webkit-transition-delay: $transition-delay;
          transition-delay: $transition-delay;
}
@mixin transition-timing-function($timing-function...) {
  -webkit-transition-timing-function: $timing-function;
          transition-timing-function: $timing-function;
}